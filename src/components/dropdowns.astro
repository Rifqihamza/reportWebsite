---
// Dropdown.astro
interface Props {
  id: string;
  label: string;
  items: string[];
}

const { id, label, items } = Astro.props;
---

<div
  class="relative text-left mb-6 w-full dropdown-container"
  data-dropdown-id={id}
>
  <button
    type="button"
    class="dropdown-trigger rounded-lg flex items-center justify-between px-6 py-2 w-full text-white bg-red-900 -translate-y-[10px] [box-shadow:0_10px_0_#d1c9b4] active:[box-shadow:0_5px_0_#d1c2b5] active:-translate-y-[5px]"
    aria-expanded="false"
    aria-haspopup="true"
  >
    <span class="dropdown-label">{label}</span>
    <svg
      class="w-4 h-4 ml-2"
      viewBox="0 0 10 6"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M1 1L5 5L9 1"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"></path>
    </svg>
  </button>

  <div
    class="hidden absolute z-10 mt-2 w-full bg-white rounded-lg shadow divide-y divide-gray-100 dropdown-menu"
  >
    <ul class="py-2 text-sm text-gray-700">
      {
        items.map((item) => (
          <li>
            <button
              type="button"
              class="dropdown-item block w-full text-left px-4 py-2 hover:bg-gray-100"
              data-value={item}
            >
              {item}
            </button>
          </li>
        ))
      }
    </ul>
  </div>

  <input type="hidden" name={id} value="" />
</div>

<script>
  (function () {
    document.addEventListener("DOMContentLoaded", function () {
      const dropdowns = document.querySelectorAll(".dropdown-container");

      dropdowns.forEach(function (dropdown) {
        const trigger = dropdown.querySelector(".dropdown-trigger");
        const menu = dropdown.querySelector(".dropdown-menu");
        const items = dropdown.querySelectorAll(".dropdown-item");
        const input = dropdown.querySelector('input[type="hidden"]');
        const labelEl = dropdown.querySelector(".dropdown-label");

        if (!trigger || !menu) return;

        trigger.addEventListener("click", function (e) {
          e.stopPropagation();

          const isExpanded = trigger.getAttribute("aria-expanded") === "true";

          // Close all other dropdowns
          dropdowns.forEach(function (otherDropdown) {
            if (otherDropdown !== dropdown) {
              const otherTrigger =
                otherDropdown.querySelector(".dropdown-trigger");
              const otherMenu = otherDropdown.querySelector(".dropdown-menu");
              if (otherTrigger)
                otherTrigger.setAttribute("aria-expanded", "false");
              if (otherMenu) otherMenu.classList.add("hidden");
            }
          });

          // Toggle current dropdown
          trigger.setAttribute("aria-expanded", String(!isExpanded));
          menu.classList.toggle("hidden");
        });

        items.forEach(function (item) {
          item.addEventListener("click", function (e) {
            e.stopPropagation();
            const value = item.getAttribute("data-value");

            if (input) (input as HTMLInputElement).value = value || "";
            if (labelEl) labelEl.textContent = value;

            trigger.setAttribute("aria-expanded", "false");
            menu.classList.add("hidden");
          });
        });
      });

      document.addEventListener("click", function () {
        dropdowns.forEach(function (dropdown) {
          const trigger = dropdown.querySelector(".dropdown-trigger");
          const menu = dropdown.querySelector(".dropdown-menu");

          if (trigger) trigger.setAttribute("aria-expanded", "false");
          if (menu) menu.classList.add("hidden");
        });
      });
    });
  })();
</script>
